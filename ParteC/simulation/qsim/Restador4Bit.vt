// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/02/2024 20:08:37"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Block2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Block2_vlg_sample_tst(
	a1,
	a2,
	a3,
	a4,
	b1,
	b2,
	b3,
	b4,
	bin1,
	clk,
	sampler_tx
);
input  a1;
input  a2;
input  a3;
input  a4;
input  b1;
input  b2;
input  b3;
input  b4;
input  bin1;
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(a1 or a2 or a3 or a4 or b1 or b2 or b3 or b4 or bin1 or clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Block2_vlg_check_tst (
	Bout,
	res1,
	res2,
	res3,
	res4,
	Z,
	sampler_rx
);
input  Bout;
input  res1;
input  res2;
input  res3;
input  res4;
input  Z;
input sampler_rx;

reg  Bout_expected;
reg  res1_expected;
reg  res2_expected;
reg  res3_expected;
reg  res4_expected;
reg  Z_expected;

reg  Bout_prev;
reg  res1_prev;
reg  res2_prev;
reg  res3_prev;
reg  res4_prev;
reg  Z_prev;

reg  Bout_expected_prev;
reg  res1_expected_prev;
reg  res2_expected_prev;
reg  res3_expected_prev;
reg  res4_expected_prev;
reg  Z_expected_prev;

reg  last_Bout_exp;
reg  last_res1_exp;
reg  last_res2_exp;
reg  last_res3_exp;
reg  last_res4_exp;
reg  last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	Bout_prev = Bout;
	res1_prev = res1;
	res2_prev = res2;
	res3_prev = res3;
	res4_prev = res4;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	Bout_expected_prev = Bout_expected;
	res1_expected_prev = res1_expected;
	res2_expected_prev = res2_expected;
	res3_expected_prev = res3_expected;
	res4_expected_prev = res4_expected;
	Z_expected_prev = Z_expected;
end



// expected Bout
initial
begin
	Bout_expected = 1'bX;
end 

// expected res1
initial
begin
	res1_expected = 1'bX;
end 

// expected res2
initial
begin
	res2_expected = 1'bX;
end 

// expected res3
initial
begin
	res3_expected = 1'bX;
end 

// expected res4
initial
begin
	res4_expected = 1'bX;
end 

// expected Z
initial
begin
	Z_expected = 1'bX;
end 
// generate trigger
always @(Bout_expected or Bout or res1_expected or res1 or res2_expected or res2 or res3_expected or res3 or res4_expected or res4 or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Bout = %b | expected res1 = %b | expected res2 = %b | expected res3 = %b | expected res4 = %b | expected Z = %b | ",Bout_expected_prev,res1_expected_prev,res2_expected_prev,res3_expected_prev,res4_expected_prev,Z_expected_prev);
	$display("| real Bout = %b | real res1 = %b | real res2 = %b | real res3 = %b | real res4 = %b | real Z = %b | ",Bout_prev,res1_prev,res2_prev,res3_prev,res4_prev,Z_prev);
`endif
	if (
		( Bout_expected_prev !== 1'bx ) && ( Bout_prev !== Bout_expected_prev )
		&& ((Bout_expected_prev !== last_Bout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Bout_exp = Bout_expected_prev;
	end
	if (
		( res1_expected_prev !== 1'bx ) && ( res1_prev !== res1_expected_prev )
		&& ((res1_expected_prev !== last_res1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res1_expected_prev);
		$display ("     Real value = %b", res1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_res1_exp = res1_expected_prev;
	end
	if (
		( res2_expected_prev !== 1'bx ) && ( res2_prev !== res2_expected_prev )
		&& ((res2_expected_prev !== last_res2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res2_expected_prev);
		$display ("     Real value = %b", res2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res2_exp = res2_expected_prev;
	end
	if (
		( res3_expected_prev !== 1'bx ) && ( res3_prev !== res3_expected_prev )
		&& ((res3_expected_prev !== last_res3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res3_expected_prev);
		$display ("     Real value = %b", res3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_res3_exp = res3_expected_prev;
	end
	if (
		( res4_expected_prev !== 1'bx ) && ( res4_prev !== res4_expected_prev )
		&& ((res4_expected_prev !== last_res4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res4_expected_prev);
		$display ("     Real value = %b", res4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_res4_exp = res4_expected_prev;
	end
	if (
		( Z_expected_prev !== 1'bx ) && ( Z_prev !== Z_expected_prev )
		&& ((Z_expected_prev !== last_Z_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp = Z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Block2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a1;
reg a2;
reg a3;
reg a4;
reg b1;
reg b2;
reg b3;
reg b4;
reg bin1;
reg clk;
// wires                                               
wire Bout;
wire res1;
wire res2;
wire res3;
wire res4;
wire Z;

wire sampler;                             

// assign statements (if any)                          
Block2 i1 (
// port map - connection between master ports and signals/registers   
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.a4(a4),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.b4(b4),
	.bin1(bin1),
	.Bout(Bout),
	.clk(clk),
	.res1(res1),
	.res2(res2),
	.res3(res3),
	.res4(res4),
	.Z(Z)
);

// a1
always
begin
	a1 = 1'b0;
	a1 = #20000 1'b1;
	#20000;
end 

// a2
initial
begin
	repeat(4)
	begin
		a2 = 1'b0;
		a2 = #20000 1'b1;
		# 20000;
	end
	a2 = 1'b0;
	a2 = #180000 1'b1;
	# 20000;
	repeat(11)
	begin
		a2 = 1'b0;
		a2 = #20000 1'b1;
		# 20000;
	end
	a2 = 1'b0;
	a2 = #180000 1'b1;
end 

// a3
initial
begin
	repeat(8)
	begin
		a3 = 1'b0;
		a3 = #20000 1'b1;
		# 20000;
	end
	a3 = 1'b0;
	a3 = #180000 1'b1;
	# 20000;
	repeat(7)
	begin
		a3 = 1'b0;
		a3 = #20000 1'b1;
		# 20000;
	end
	a3 = 1'b0;
	a3 = #180000 1'b1;
end 

// a4
always
begin
	a4 = 1'b0;
	a4 = #20000 1'b1;
	#20000;
end 

// b1
initial
begin
	repeat(6)
	begin
		b1 = 1'b0;
		b1 = #40000 1'b1;
		# 40000;
	end
	b1 = 1'b0;
	b1 = #200000 1'b1;
	# 40000;
	repeat(3)
	begin
		b1 = 1'b0;
		b1 = #40000 1'b1;
		# 40000;
	end
	b1 = 1'b0;
end 

// b2
initial
begin
	repeat(12)
	begin
		b2 = 1'b0;
		b2 = #40000 1'b1;
		# 40000;
	end
	b2 = 1'b0;
end 

// b3
initial
begin
	repeat(8)
	begin
		b3 = 1'b0;
		b3 = #40000 1'b1;
		# 40000;
	end
	b3 = 1'b0;
	b3 = #200000 1'b1;
	b3 = #40000 1'b0;
	b3 = #40000 1'b1;
	b3 = #40000 1'b0;
end 

// b4
initial
begin
	repeat(10)
	begin
		b4 = 1'b0;
		b4 = #40000 1'b1;
		# 40000;
	end
	b4 = 1'b0;
end 

// bin1
initial
begin
	repeat(6)
	begin
		bin1 = 1'b0;
		bin1 = #80000 1'b1;
		# 80000;
	end
	bin1 = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

Block2_vlg_sample_tst tb_sample (
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.a4(a4),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.b4(b4),
	.bin1(bin1),
	.clk(clk),
	.sampler_tx(sampler)
);

Block2_vlg_check_tst tb_out(
	.Bout(Bout),
	.res1(res1),
	.res2(res2),
	.res3(res3),
	.res4(res4),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

