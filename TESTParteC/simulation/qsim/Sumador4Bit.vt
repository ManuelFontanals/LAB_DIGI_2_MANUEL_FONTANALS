// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/01/2024 21:08:18"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    SumadorDefBloq
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SumadorDefBloq_vlg_sample_tst(
	a1,
	a2,
	a3,
	a4,
	b1,
	b2,
	b3,
	b4,
	Cin1,
	Cin2,
	Cin3,
	Cin4,
	clk,
	sampler_tx
);
input  a1;
input  a2;
input  a3;
input  a4;
input  b1;
input  b2;
input  b3;
input  b4;
input  Cin1;
input  Cin2;
input  Cin3;
input  Cin4;
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(a1 or a2 or a3 or a4 or b1 or b2 or b3 or b4 or Cin1 or Cin2 or Cin3 or Cin4 or clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module SumadorDefBloq_vlg_check_tst (
	Cout1,
	Cout2,
	Cout3,
	Cout4,
	res1,
	res2,
	res3,
	res4,
	sampler_rx
);
input  Cout1;
input  Cout2;
input  Cout3;
input  Cout4;
input  res1;
input  res2;
input  res3;
input  res4;
input sampler_rx;

reg  Cout1_expected;
reg  Cout2_expected;
reg  Cout3_expected;
reg  Cout4_expected;
reg  res1_expected;
reg  res2_expected;
reg  res3_expected;
reg  res4_expected;

reg  Cout1_prev;
reg  Cout2_prev;
reg  Cout3_prev;
reg  Cout4_prev;
reg  res1_prev;
reg  res2_prev;
reg  res3_prev;
reg  res4_prev;

reg  Cout1_expected_prev;
reg  Cout2_expected_prev;
reg  Cout3_expected_prev;
reg  Cout4_expected_prev;
reg  res1_expected_prev;
reg  res2_expected_prev;
reg  res3_expected_prev;
reg  res4_expected_prev;

reg  last_Cout1_exp;
reg  last_Cout2_exp;
reg  last_Cout3_exp;
reg  last_Cout4_exp;
reg  last_res1_exp;
reg  last_res2_exp;
reg  last_res3_exp;
reg  last_res4_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	Cout1_prev = Cout1;
	Cout2_prev = Cout2;
	Cout3_prev = Cout3;
	Cout4_prev = Cout4;
	res1_prev = res1;
	res2_prev = res2;
	res3_prev = res3;
	res4_prev = res4;
end

// update expected /o prevs

always @(trigger)
begin
	Cout1_expected_prev = Cout1_expected;
	Cout2_expected_prev = Cout2_expected;
	Cout3_expected_prev = Cout3_expected;
	Cout4_expected_prev = Cout4_expected;
	res1_expected_prev = res1_expected;
	res2_expected_prev = res2_expected;
	res3_expected_prev = res3_expected;
	res4_expected_prev = res4_expected;
end



// expected Cout1
initial
begin
	Cout1_expected = 1'bX;
end 

// expected Cout2
initial
begin
	Cout2_expected = 1'bX;
end 

// expected Cout3
initial
begin
	Cout3_expected = 1'bX;
end 

// expected Cout4
initial
begin
	Cout4_expected = 1'bX;
end 

// expected res1
initial
begin
	res1_expected = 1'bX;
end 

// expected res2
initial
begin
	res2_expected = 1'bX;
end 

// expected res3
initial
begin
	res3_expected = 1'bX;
end 

// expected res4
initial
begin
	res4_expected = 1'bX;
end 
// generate trigger
always @(Cout1_expected or Cout1 or Cout2_expected or Cout2 or Cout3_expected or Cout3 or Cout4_expected or Cout4 or res1_expected or res1 or res2_expected or res2 or res3_expected or res3 or res4_expected or res4)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Cout1 = %b | expected Cout2 = %b | expected Cout3 = %b | expected Cout4 = %b | expected res1 = %b | expected res2 = %b | expected res3 = %b | expected res4 = %b | ",Cout1_expected_prev,Cout2_expected_prev,Cout3_expected_prev,Cout4_expected_prev,res1_expected_prev,res2_expected_prev,res3_expected_prev,res4_expected_prev);
	$display("| real Cout1 = %b | real Cout2 = %b | real Cout3 = %b | real Cout4 = %b | real res1 = %b | real res2 = %b | real res3 = %b | real res4 = %b | ",Cout1_prev,Cout2_prev,Cout3_prev,Cout4_prev,res1_prev,res2_prev,res3_prev,res4_prev);
`endif
	if (
		( Cout1_expected_prev !== 1'bx ) && ( Cout1_prev !== Cout1_expected_prev )
		&& ((Cout1_expected_prev !== last_Cout1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cout1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cout1_expected_prev);
		$display ("     Real value = %b", Cout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cout1_exp = Cout1_expected_prev;
	end
	if (
		( Cout2_expected_prev !== 1'bx ) && ( Cout2_prev !== Cout2_expected_prev )
		&& ((Cout2_expected_prev !== last_Cout2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cout2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cout2_expected_prev);
		$display ("     Real value = %b", Cout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cout2_exp = Cout2_expected_prev;
	end
	if (
		( Cout3_expected_prev !== 1'bx ) && ( Cout3_prev !== Cout3_expected_prev )
		&& ((Cout3_expected_prev !== last_Cout3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cout3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cout3_expected_prev);
		$display ("     Real value = %b", Cout3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Cout3_exp = Cout3_expected_prev;
	end
	if (
		( Cout4_expected_prev !== 1'bx ) && ( Cout4_prev !== Cout4_expected_prev )
		&& ((Cout4_expected_prev !== last_Cout4_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cout4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cout4_expected_prev);
		$display ("     Real value = %b", Cout4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Cout4_exp = Cout4_expected_prev;
	end
	if (
		( res1_expected_prev !== 1'bx ) && ( res1_prev !== res1_expected_prev )
		&& ((res1_expected_prev !== last_res1_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res1_expected_prev);
		$display ("     Real value = %b", res1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_res1_exp = res1_expected_prev;
	end
	if (
		( res2_expected_prev !== 1'bx ) && ( res2_prev !== res2_expected_prev )
		&& ((res2_expected_prev !== last_res2_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res2_expected_prev);
		$display ("     Real value = %b", res2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_res2_exp = res2_expected_prev;
	end
	if (
		( res3_expected_prev !== 1'bx ) && ( res3_prev !== res3_expected_prev )
		&& ((res3_expected_prev !== last_res3_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res3_expected_prev);
		$display ("     Real value = %b", res3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_res3_exp = res3_expected_prev;
	end
	if (
		( res4_expected_prev !== 1'bx ) && ( res4_prev !== res4_expected_prev )
		&& ((res4_expected_prev !== last_res4_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res4_expected_prev);
		$display ("     Real value = %b", res4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_res4_exp = res4_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module SumadorDefBloq_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a1;
reg a2;
reg a3;
reg a4;
reg b1;
reg b2;
reg b3;
reg b4;
reg Cin1;
reg Cin2;
reg Cin3;
reg Cin4;
reg clk;
// wires                                               
wire Cout1;
wire Cout2;
wire Cout3;
wire Cout4;
wire res1;
wire res2;
wire res3;
wire res4;

wire sampler;                             

// assign statements (if any)                          
SumadorDefBloq i1 (
// port map - connection between master ports and signals/registers   
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.a4(a4),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.b4(b4),
	.Cin1(Cin1),
	.Cin2(Cin2),
	.Cin3(Cin3),
	.Cin4(Cin4),
	.clk(clk),
	.Cout1(Cout1),
	.Cout2(Cout2),
	.Cout3(Cout3),
	.Cout4(Cout4),
	.res1(res1),
	.res2(res2),
	.res3(res3),
	.res4(res4)
);

// a1
initial
begin
	a1 = 1'b0;
	a1 = #80000 1'b1;
	# 20000;
	repeat(20)
	begin
		a1 = 1'b0;
		a1 = #20000 1'b1;
		# 20000;
	end
	a1 = 1'b0;
end 

// a2
initial
begin
	a2 = 1'b0;
	a2 = #80000 1'b1;
	# 20000;
	repeat(20)
	begin
		a2 = 1'b0;
		a2 = #20000 1'b1;
		# 20000;
	end
	a2 = 1'b0;
end 

// a3
initial
begin
	a3 = 1'b0;
	a3 = #80000 1'b1;
	# 20000;
	repeat(20)
	begin
		a3 = 1'b0;
		a3 = #20000 1'b1;
		# 20000;
	end
	a3 = 1'b0;
end 

// a4
initial
begin
	a4 = 1'b0;
	a4 = #80000 1'b1;
	# 20000;
	repeat(20)
	begin
		a4 = 1'b0;
		a4 = #20000 1'b1;
		# 20000;
	end
	a4 = 1'b0;
end 

// b1
initial
begin
	b1 = 1'b0;
	b1 = #120000 1'b1;
	# 40000;
	repeat(9)
	begin
		b1 = 1'b0;
		b1 = #40000 1'b1;
		# 40000;
	end
	b1 = 1'b0;
end 

// b2
initial
begin
	b2 = 1'b0;
	b2 = #120000 1'b1;
	# 40000;
	repeat(9)
	begin
		b2 = 1'b0;
		b2 = #40000 1'b1;
		# 40000;
	end
	b2 = 1'b0;
end 

// b3
initial
begin
	b3 = 1'b0;
	b3 = #120000 1'b1;
	# 40000;
	repeat(9)
	begin
		b3 = 1'b0;
		b3 = #40000 1'b1;
		# 40000;
	end
	b3 = 1'b0;
end 

// b4
initial
begin
	b4 = 1'b0;
	b4 = #120000 1'b1;
	# 40000;
	repeat(9)
	begin
		b4 = 1'b0;
		b4 = #40000 1'b1;
		# 40000;
	end
	b4 = 1'b0;
end 

// Cin1
initial
begin
	Cin1 = 1'b0;
	Cin1 = #160000 1'b1;
	# 80000;
	repeat(4)
	begin
		Cin1 = 1'b0;
		Cin1 = #80000 1'b1;
		# 80000;
	end
	Cin1 = 1'b0;
end 

// Cin2
initial
begin
	Cin2 = 1'b0;
	Cin2 = #160000 1'b1;
	# 80000;
	repeat(4)
	begin
		Cin2 = 1'b0;
		Cin2 = #80000 1'b1;
		# 80000;
	end
	Cin2 = 1'b0;
end 

// Cin3
initial
begin
	Cin3 = 1'b0;
	Cin3 = #160000 1'b1;
	# 80000;
	repeat(4)
	begin
		Cin3 = 1'b0;
		Cin3 = #80000 1'b1;
		# 80000;
	end
	Cin3 = 1'b0;
end 

// Cin4
initial
begin
	Cin4 = 1'b0;
	Cin4 = #160000 1'b1;
	# 80000;
	repeat(4)
	begin
		Cin4 = 1'b0;
		Cin4 = #80000 1'b1;
		# 80000;
	end
	Cin4 = 1'b0;
end 

// clk
initial
begin
	clk = 1'b0;
	clk = #70000 1'b1;
	# 10000;
	repeat(2)
	begin
		clk = 1'b0;
		clk = #10000 1'b1;
		# 10000;
	end
	clk = 1'b0;
	clk = #10000 1'b1;
	# 10000;
	repeat(38)
	begin
		clk = 1'b0;
		clk = #10000 1'b1;
		# 10000;
	end
	clk = 1'b0;
end 

SumadorDefBloq_vlg_sample_tst tb_sample (
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.a4(a4),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.b4(b4),
	.Cin1(Cin1),
	.Cin2(Cin2),
	.Cin3(Cin3),
	.Cin4(Cin4),
	.clk(clk),
	.sampler_tx(sampler)
);

SumadorDefBloq_vlg_check_tst tb_out(
	.Cout1(Cout1),
	.Cout2(Cout2),
	.Cout3(Cout3),
	.Cout4(Cout4),
	.res1(res1),
	.res2(res2),
	.res3(res3),
	.res4(res4),
	.sampler_rx(sampler)
);
endmodule

