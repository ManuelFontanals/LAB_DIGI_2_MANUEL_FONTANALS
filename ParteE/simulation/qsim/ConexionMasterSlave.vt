// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/06/2024 19:51:12"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ConexionMasterSlave
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ConexionMasterSlave_vlg_sample_tst(
	fin_dato,
	fin_dir,
	reset,
	SCL,
	SDA,
	soy,
	sampler_tx
);
input  fin_dato;
input  fin_dir;
input  reset;
input  SCL;
input  SDA;
input  soy;
output sampler_tx;

reg sample;
time current_time;
always @(fin_dato or fin_dir or reset or SCL or SDA or soy)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ConexionMasterSlave_vlg_check_tst (
	ACK,
	Hab_Data,
	Hab_dir,
	sampler_rx
);
input  ACK;
input  Hab_Data;
input  Hab_dir;
input sampler_rx;

reg  ACK_expected;
reg  Hab_Data_expected;
reg  Hab_dir_expected;

reg  ACK_prev;
reg  Hab_Data_prev;
reg  Hab_dir_prev;

reg  ACK_expected_prev;
reg  Hab_Data_expected_prev;
reg  Hab_dir_expected_prev;

reg  last_ACK_exp;
reg  last_Hab_Data_exp;
reg  last_Hab_dir_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	ACK_prev = ACK;
	Hab_Data_prev = Hab_Data;
	Hab_dir_prev = Hab_dir;
end

// update expected /o prevs

always @(trigger)
begin
	ACK_expected_prev = ACK_expected;
	Hab_Data_expected_prev = Hab_Data_expected;
	Hab_dir_expected_prev = Hab_dir_expected;
end



// expected Hab_dir
initial
begin
	Hab_dir_expected = 1'bX;
end 

// expected Hab_Data
initial
begin
	Hab_Data_expected = 1'bX;
end 

// expected ACK
initial
begin
	ACK_expected = 1'bX;
end 
// generate trigger
always @(ACK_expected or ACK or Hab_Data_expected or Hab_Data or Hab_dir_expected or Hab_dir)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ACK = %b | expected Hab_Data = %b | expected Hab_dir = %b | ",ACK_expected_prev,Hab_Data_expected_prev,Hab_dir_expected_prev);
	$display("| real ACK = %b | real Hab_Data = %b | real Hab_dir = %b | ",ACK_prev,Hab_Data_prev,Hab_dir_prev);
`endif
	if (
		( ACK_expected_prev !== 1'bx ) && ( ACK_prev !== ACK_expected_prev )
		&& ((ACK_expected_prev !== last_ACK_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ACK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ACK_expected_prev);
		$display ("     Real value = %b", ACK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ACK_exp = ACK_expected_prev;
	end
	if (
		( Hab_Data_expected_prev !== 1'bx ) && ( Hab_Data_prev !== Hab_Data_expected_prev )
		&& ((Hab_Data_expected_prev !== last_Hab_Data_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hab_Data :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hab_Data_expected_prev);
		$display ("     Real value = %b", Hab_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Hab_Data_exp = Hab_Data_expected_prev;
	end
	if (
		( Hab_dir_expected_prev !== 1'bx ) && ( Hab_dir_prev !== Hab_dir_expected_prev )
		&& ((Hab_dir_expected_prev !== last_Hab_dir_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hab_dir :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hab_dir_expected_prev);
		$display ("     Real value = %b", Hab_dir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Hab_dir_exp = Hab_dir_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ConexionMasterSlave_vlg_vec_tst();
// constants                                           
// general purpose registers
reg fin_dato;
reg fin_dir;
reg reset;
reg SCL;
reg SDA;
reg soy;
// wires                                               
wire ACK;
wire Hab_Data;
wire Hab_dir;

wire sampler;                             

// assign statements (if any)                          
ConexionMasterSlave i1 (
// port map - connection between master ports and signals/registers   
	.ACK(ACK),
	.fin_dato(fin_dato),
	.fin_dir(fin_dir),
	.Hab_Data(Hab_Data),
	.Hab_dir(Hab_dir),
	.reset(reset),
	.SCL(SCL),
	.SDA(SDA),
	.soy(soy)
);

// SDA
initial
begin
	SDA = 1'b1;
	SDA = #70000 1'b0;
	SDA = #140000 1'b1;
	SDA = #110000 1'b0;
	SDA = #140000 1'b1;
	SDA = #190000 1'b0;
	SDA = #240000 1'b1;
end 

// fin_dir
initial
begin
	fin_dir = 1'b0;
	fin_dir = #170000 1'b1;
	fin_dir = #30000 1'b0;
	fin_dir = #200000 1'b1;
	fin_dir = #40000 1'b0;
	fin_dir = #150000 1'b1;
	fin_dir = #130000 1'b0;
	fin_dir = #170000 1'b1;
	fin_dir = #90000 1'b0;
end 

// fin_dato
initial
begin
	fin_dato = 1'b0;
	fin_dato = #90000 1'b1;
	fin_dato = #30000 1'b0;
	fin_dato = #650000 1'b1;
	fin_dato = #30000 1'b0;
end 

// soy
initial
begin
	soy = 1'b0;
	soy = #130000 1'b1;
	soy = #30000 1'b0;
	soy = #240000 1'b1;
	soy = #40000 1'b0;
	soy = #250000 1'b1;
	soy = #70000 1'b0;
end 

// SCL
always
begin
	SCL = 1'b0;
	SCL = #20000 1'b1;
	#20000;
end 

// reset
initial
begin
	reset = 1'b0;
end 

ConexionMasterSlave_vlg_sample_tst tb_sample (
	.fin_dato(fin_dato),
	.fin_dir(fin_dir),
	.reset(reset),
	.SCL(SCL),
	.SDA(SDA),
	.soy(soy),
	.sampler_tx(sampler)
);

ConexionMasterSlave_vlg_check_tst tb_out(
	.ACK(ACK),
	.Hab_Data(Hab_Data),
	.Hab_dir(Hab_dir),
	.sampler_rx(sampler)
);
endmodule

