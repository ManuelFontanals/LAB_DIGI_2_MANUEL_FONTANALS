// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/01/2024 19:22:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    RestadorCompleto
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RestadorCompleto_vlg_sample_tst(
	clk,
	in_a,
	in_b,
	in_bin,
	sampler_tx
);
input  clk;
input  in_a;
input  in_b;
input  in_bin;
output sampler_tx;

reg sample;
time current_time;
always @(clk or in_a or in_b or in_bin)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module RestadorCompleto_vlg_check_tst (
	o_bout,
	o_res,
	sampler_rx
);
input  o_bout;
input  o_res;
input sampler_rx;

reg  o_bout_expected;
reg  o_res_expected;

reg  o_bout_prev;
reg  o_res_prev;

reg  o_bout_expected_prev;
reg  o_res_expected_prev;

reg  last_o_bout_exp;
reg  last_o_res_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	o_bout_prev = o_bout;
	o_res_prev = o_res;
end

// update expected /o prevs

always @(trigger)
begin
	o_bout_expected_prev = o_bout_expected;
	o_res_expected_prev = o_res_expected;
end



// expected o_bout
initial
begin
	o_bout_expected = 1'bX;
end 

// expected o_res
initial
begin
	o_res_expected = 1'bX;
end 
// generate trigger
always @(o_bout_expected or o_bout or o_res_expected or o_res)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected o_bout = %b | expected o_res = %b | ",o_bout_expected_prev,o_res_expected_prev);
	$display("| real o_bout = %b | real o_res = %b | ",o_bout_prev,o_res_prev);
`endif
	if (
		( o_bout_expected_prev !== 1'bx ) && ( o_bout_prev !== o_bout_expected_prev )
		&& ((o_bout_expected_prev !== last_o_bout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_bout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_bout_expected_prev);
		$display ("     Real value = %b", o_bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_bout_exp = o_bout_expected_prev;
	end
	if (
		( o_res_expected_prev !== 1'bx ) && ( o_res_prev !== o_res_expected_prev )
		&& ((o_res_expected_prev !== last_o_res_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_res :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_res_expected_prev);
		$display ("     Real value = %b", o_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_res_exp = o_res_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module RestadorCompleto_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg in_a;
reg in_b;
reg in_bin;
// wires                                               
wire o_bout;
wire o_res;

wire sampler;                             

// assign statements (if any)                          
RestadorCompleto i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.in_a(in_a),
	.in_b(in_b),
	.in_bin(in_bin),
	.o_bout(o_bout),
	.o_res(o_res)
);

// clk
initial
begin
	repeat(16)
	begin
		clk = 1'b0;
		clk = #20000 1'b1;
		# 20000;
	end
	clk = 1'b0;
end 

// in_a
initial
begin
	in_a = 1'b0;
	in_a = #70000 1'b1;
	in_a = #35000 1'b0;
	in_a = #70000 1'b1;
	in_a = #35000 1'b0;
	in_a = #35000 1'b1;
	in_a = #35000 1'b0;
	in_a = #175000 1'b1;
	in_a = #35000 1'b0;
	in_a = #35000 1'b1;
	in_a = #70000 1'b0;
	in_a = #35000 1'b1;
	in_a = #10000 1'b0;
end 

// in_b
initial
begin
	in_b = 1'b0;
	in_b = #90000 1'b1;
	in_b = #35000 1'b0;
	in_b = #70000 1'b1;
	in_b = #70000 1'b0;
	in_b = #70000 1'b1;
	in_b = #70000 1'b0;
	in_b = #105000 1'b1;
	in_b = #35000 1'b0;
end 

// in_bin
initial
begin
	in_bin = 1'b0;
	in_bin = #75000 1'b1;
	in_bin = #35000 1'b0;
	in_bin = #105000 1'b1;
	in_bin = #105000 1'b0;
	in_bin = #35000 1'b1;
	in_bin = #35000 1'b0;
	in_bin = #35000 1'b1;
	in_bin = #70000 1'b0;
end 

RestadorCompleto_vlg_sample_tst tb_sample (
	.clk(clk),
	.in_a(in_a),
	.in_b(in_b),
	.in_bin(in_bin),
	.sampler_tx(sampler)
);

RestadorCompleto_vlg_check_tst tb_out(
	.o_bout(o_bout),
	.o_res(o_res),
	.sampler_rx(sampler)
);
endmodule

